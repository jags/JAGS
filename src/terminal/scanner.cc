
#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer zz_create_buffer
#define yy_delete_buffer zz_delete_buffer
#define yy_flex_debug zz_flex_debug
#define yy_init_buffer zz_init_buffer
#define yy_flush_buffer zz_flush_buffer
#define yy_load_buffer_state zz_load_buffer_state
#define yy_switch_to_buffer zz_switch_to_buffer
#define yyin zzin
#define yyleng zzleng
#define yylex zzlex
#define yylineno zzlineno
#define yyout zzout
#define yyrestart zzrestart
#define yytext zztext
#define yywrap zzwrap
#define yyalloc zzalloc
#define yyrealloc zzrealloc
#define yyfree zzfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE zzrestart(zzin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int zzleng;

extern FILE *zzin, *zzout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up zztext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up zztext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via zzrestart()), so that the user can continue scanning by
	 * just pointing zzin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when zztext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int zzleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow zzwrap()'s to do buffer switches
 * instead of setting up a fresh zzin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void zzrestart (FILE *input_file  );
void zz_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE zz_create_buffer (FILE *file,int size  );
void zz_delete_buffer (YY_BUFFER_STATE b  );
void zz_flush_buffer (YY_BUFFER_STATE b  );
void zzpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void zzpop_buffer_state (void );

static void zzensure_buffer_stack (void );
static void zz_load_buffer_state (void );
static void zz_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER zz_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE zz_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE zz_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE zz_scan_bytes (yyconst char *bytes,int len  );

void *zzalloc (yy_size_t  );
void *zzrealloc (void *,yy_size_t  );
void zzfree (void *  );

#define yy_new_buffer zz_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        zzensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            zz_create_buffer(zzin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        zzensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            zz_create_buffer(zzin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *zzin = (FILE *) 0, *zzout = (FILE *) 0;

typedef int yy_state_type;

extern int zzlineno;

int zzlineno = 1;

extern char *zztext;
#define yytext_ptr zztext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up zztext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	zzleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 66
#define YY_END_OF_BUFFER 67
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[223] =
    {   0,
        0,    0,    0,    0,   41,   41,   67,   66,   44,   47,
       66,   66,   66,   32,   33,   36,   29,   66,   63,   66,
       55,   37,   38,   66,   34,   63,   30,   31,   39,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   46,   66,   63,   53,   63,   63,   63,
       63,   63,   41,   42,   44,    0,   64,    0,   45,    0,
       65,    0,   55,   63,   63,   52,   40,   50,    0,   35,
       63,   13,   26,   63,   63,   63,   63,   63,   63,    3,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
        4,   63,   63,   46,   53,   63,   54,   57,   63,   63,

        0,   61,   63,   63,   41,   42,   42,   43,   52,   63,
       50,    0,    0,   63,   63,   63,   63,   63,   63,   25,
       63,   63,   63,   63,   63,   63,   63,   27,   28,   63,
       17,   63,   63,   63,   63,   63,   63,   63,   63,   63,
        0,    0,   63,    0,   48,   63,   63,   63,   21,   63,
        2,   24,   63,   23,   63,   63,   63,   63,   63,   22,
       19,   16,   63,   56,   58,   63,   63,   63,   51,   51,
       49,   12,   10,   18,   63,   63,    5,    1,   63,   63,
       63,   63,   63,   63,    0,   60,   63,   63,   63,   63,
       63,   63,   63,   11,   63,   63,    7,   63,   14,    8,

       63,   63,   63,   63,   63,   15,   63,   20,   63,   63,
       63,   63,   63,   63,    9,    6,   63,    0,   59,    0,
       62,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
       20,    1,    1,    1,   21,   22,   22,   23,   24,   22,
       22,   22,   22,   22,   22,   25,   22,   26,   22,   22,
       22,   22,   22,   22,   27,   22,   22,   22,   22,   22,
       28,   29,   30,    1,   29,   31,   32,   33,   34,   35,

       36,   22,   37,   38,   39,   22,   22,   40,   41,   42,
       43,   44,   22,   45,   46,   47,   48,   22,   49,   50,
       51,   52,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    3,    3,    3,    3,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    1,    3,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3
    } ;

static yyconst flex_int16_t yy_base[231] =
    {   0,
        0,    0,   50,   94,  291,  287,  296,  837,   52,  837,
      283,  276,  263,  837,  837,  837,  837,   41,   45,  251,
       51,  837,  837,  235,  837,   56,  837,  837,  837,   64,
       73,  128,   90,   85,   96,   78,  107,  118,  127,  134,
      143,  149,  159,  226,   54,  178,  183,  177,  180,  115,
      193,  171,    0,   63,   79,  183,  837,  177,  837,  166,
      837,  148,  206,    0,  101,  115,  837,  169,   81,  837,
      202,  203,  205,  208,  211,  221,  227,  228,  233,  245,
      235,  251,  253,  258,  272,  270,  277,  263,  279,  284,
      289,  296,  298,  157,  313,  303,  837,  312,  321,  333,

      128,  837,  320,  326,    0,  117,  139,  837,  230,  210,
      339,  265,  139,  338,  340,  345,  352,  354,  357,  359,
      364,  371,  373,  378,  380,  381,  390,  397,  398,  399,
      400,  416,  417,  418,  419,  426,  436,  438,  424,  443,
      410,  130,   99,   88,   79,  446,  452,  460,  465,  470,
      468,  478,  484,  486,  492,  502,  504,  505,  518,  512,
      521,  524,  530,  531,  537,  538,  573,  554,   75,   46,
       43,  540,  547,  557,  559,  560,  566,  576,  578,  586,
      579,  595,  598,  600,  194,  837,  603,  605,  608,  617,
      622,  624,  625,  627,  641,  643,  646,  648,  653,  660,

      662,  665,  678,  672,  684,  686,  692,  691,  694,  708,
      710,  713,  711,  746,  729,  730,  762,  209,  837,  243,
      837,  837,  809,  813,  817,  821,  823,  827,  831,  832
    } ;

static yyconst flex_int16_t yy_def[231] =
    {   0,
      222,    1,    1,    1,  223,  223,  222,  222,  222,  222,
      224,  225,  226,  222,  222,  222,  222,  222,  227,  222,
      222,  222,  222,  222,  222,  227,  222,  222,  222,  227,
      227,  227,  227,  227,  227,   32,   32,   32,   32,   32,
       32,   32,   41,  222,  222,   41,  222,   41,   41,   32,
       32,   41,  228,  229,  222,  224,  222,  225,  222,  226,
      222,  222,  222,  230,   41,  230,  222,  222,  222,  222,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,  222,  222,   41,  222,   41,   41,   41,

      222,  222,   41,   41,  228,  229,  229,  222,  222,  230,
      222,  222,  222,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
      222,  222,  230,  222,  222,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,  222,  230,
      222,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,  222,  222,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,  222,  222,  222,
      222,    0,  222,  222,  222,  222,  222,  222,  222,  222
    } ;

static yyconst flex_int16_t yy_nxt[890] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,   16,
        8,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   26,   26,   26,   26,   26,   26,   27,    8,   28,
       29,   30,   31,   32,   33,   34,   26,   26,   35,   36,
       37,   38,   26,   39,   40,   41,   42,   43,   26,   26,
       26,   26,   44,   55,   62,   55,   63,   64,  171,   64,
       66,  170,   45,   46,   68,   47,   63,   62,   64,   95,
       64,   64,  107,   64,   69,   48,   64,  108,   64,   64,
       55,   49,   55,   50,   64,   64,   69,   64,   64,   51,
      169,  113,   64,  113,  145,   52,   44,   64,   71,   64,

       64,   64,   64,  171,   64,   64,   45,   46,   64,   47,
       64,   64,   65,   64,  170,   65,  101,   65,   64,   48,
       81,   77,  102,   72,   64,   49,  222,   50,   78,  101,
       66,  222,   65,   51,   79,  102,   65,   80,  110,   52,
       64,   65,   64,   64,   65,  169,   65,   65,  107,   82,
      110,   83,   65,  108,  145,   65,   64,   65,   84,   94,
       65,   65,   73,  109,   65,   74,   65,   75,   65,   65,
       76,   65,   61,   65,   87,   85,   65,   65,   88,   59,
       65,   86,   65,   65,  111,   65,   90,   57,   65,   89,
       65,   91,  112,   66,   65,  185,   68,   98,   95,   92,

       96,  186,   93,   99,  112,   65,   69,   97,   65,   65,
      218,   65,   65,   65,   71,   65,  219,  104,   69,   68,
      142,   63,  143,   65,   65,  100,   65,   65,   94,   69,
       65,  103,   65,  114,   65,   81,   65,   65,   65,  115,
       65,   69,   65,   65,  220,  109,  116,   70,   65,   65,
      221,   65,   65,  141,   65,  117,   65,   65,   65,   65,
       67,  118,   65,   65,   65,  141,  123,   65,   65,   61,
       65,  121,  120,  119,   65,  144,   65,  144,   59,   65,
       65,   65,   65,  122,   65,  124,   65,   57,   65,   65,
      126,   65,  125,   65,   65,  222,   54,   65,   65,   65,

       54,   65,  127,   65,   65,   65,  128,   65,   65,  131,
       65,  129,   65,  222,  132,   65,   65,  130,   65,   65,
       65,  222,  133,   65,   65,   65,   68,   65,   95,   65,
       65,   65,  135,   65,   65,   65,   69,   97,   65,  134,
      222,  136,   65,   65,   65,  137,  138,   65,   69,   65,
      222,   65,   65,  222,  111,   65,   65,   65,   65,  222,
      222,  132,  112,  222,   65,  139,   65,   65,   65,   65,
      140,   65,   65,   65,  112,   65,  148,  222,  147,   65,
       65,  146,  222,  149,   65,   65,   65,   65,  151,   65,
       65,   65,   65,  222,   65,   65,  222,  150,   65,   65,

       65,  222,   65,   65,   65,   65,   65,  154,   65,   65,
      152,   65,  157,  155,  222,   65,   65,  153,  156,   65,
      142,  158,  142,  222,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,  222,  222,  222,
      222,  222,  159,   65,   65,   65,   65,   65,   65,   65,
      163,   65,   65,  162,   65,   65,  160,   65,  161,   65,
      165,   65,   65,   65,   65,   65,  164,   65,  222,   65,
      167,   65,   65,   65,   65,  222,  166,   65,   65,  222,
      222,   65,   65,   65,   65,  222,  222,   65,  222,   65,
      168,   65,  172,  173,  222,   65,   65,  222,   65,   65,

       65,   65,  222,   65,  174,   65,   65,  222,  175,   65,
      222,   65,  222,   65,   65,   65,   65,   65,  222,   65,
      222,   65,  176,   65,   65,  222,  222,   65,  222,  177,
       65,  178,   65,   65,  222,   65,   65,   65,   65,   65,
       65,  222,  180,   65,  222,  181,  222,   65,  179,   65,
       65,   65,   65,   65,  222,   65,   65,  182,   65,   65,
      222,   65,   65,  222,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,  185,   65,  183,   65,   65,  184,
      186,  222,   65,   65,   65,   65,   65,  187,   65,   65,
       65,  189,   65,   65,   65,   65,  222,   65,  188,  222,

       65,   65,  222,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,  192,  222,  222,   65,  222,   65,
      190,   65,   65,  222,   65,   65,   65,  191,  222,   65,
      193,   65,   65,  194,   65,   65,   65,  222,   65,   65,
      197,   65,  222,   65,   65,  222,  195,  198,   65,  196,
      222,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,  199,   65,   65,  222,  222,  222,  200,   65,  202,
      201,   65,   65,   65,   65,  222,  203,   65,   65,   65,
      222,   65,  222,   65,   65,  222,  205,   65,   65,   65,
      204,   65,   65,   65,   65,   65,   65,  207,  206,   65,

       65,  222,  222,   65,  222,  222,   65,   65,   65,   65,
      208,   65,  222,   65,  209,   65,  210,   65,   65,   65,
      222,   65,   65,   65,   65,   65,   65,   65,  222,  213,
       65,  222,   65,  222,  222,  211,  212,   65,   65,   65,
       65,   65,   65,  214,   65,  215,   65,  218,   65,  222,
      222,  222,  222,  219,   65,  217,   65,   65,  216,   65,
       65,   65,  222,  220,   65,   65,  222,  222,  222,  221,
      222,  222,  222,  222,  222,   65,   65,   65,  222,  222,
      222,   65,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,   65,   65,  222,  222,  222,   65,  222,  222,

      222,  222,  222,  222,  222,  222,  222,  222,   65,   53,
       53,   53,   53,   56,   56,   56,   56,   58,   58,   58,
       58,   60,   60,   60,   60,   65,   65,  105,  222,  105,
      105,  106,  106,  106,   64,   64,    7,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222
    } ;

static yyconst flex_int16_t yy_chk[890] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    9,   18,    9,   18,   19,  171,   19,
       19,  170,    3,    3,   21,    3,   21,   45,   26,   45,
       26,   26,   54,   19,   21,    3,   30,   54,   30,   30,
       55,    3,   55,    3,   26,   31,   21,   31,   31,    3,
      169,   69,   30,   69,  145,    3,    4,   34,   30,   34,

       34,   31,   33,  144,   33,   33,    4,    4,   35,    4,
       35,   35,   36,   34,  143,   36,   50,   36,   33,    4,
       36,   33,   50,   31,   35,    4,  106,    4,   33,  101,
       66,  106,   65,    4,   34,  101,   65,   35,   66,    4,
       32,   37,   32,   32,   37,  142,   37,   65,  107,   37,
       66,   38,   38,  107,  113,   38,   32,   38,   39,   94,
       38,   39,   32,   62,   39,   32,   39,   32,   40,   39,
       32,   40,   60,   40,   41,   39,   40,   41,   41,   58,
       41,   40,   41,   42,   68,   41,   42,   56,   42,   41,
       43,   42,   68,   46,   43,  185,   47,   48,   47,   42,

       46,  185,   43,   48,   68,   43,   47,   47,   48,   46,
      218,   49,   48,   46,   49,   49,  218,   52,   47,   63,
      110,   63,  110,   48,   46,   49,   49,   51,   44,   63,
       51,   51,   51,   71,   72,   51,   73,   71,   72,   74,
       73,   63,   75,   74,  220,  109,   75,   24,   71,   72,
      220,   73,   76,  109,   74,   76,   76,   75,   77,   78,
       20,   76,   77,   78,   79,  109,   81,   76,   79,   13,
       81,   79,   78,   77,   78,  112,   80,  112,   12,   79,
       80,   81,   82,   80,   83,   82,   82,   11,   83,   84,
       83,   80,   82,   84,   88,    7,    6,   82,   88,   83,

        5,   86,   84,   85,   84,   86,   85,   85,   87,   88,
       89,   86,   87,    0,   89,   90,   86,   87,   85,   90,
       91,    0,   90,   87,   91,   89,   95,   92,   95,   93,
       90,   92,   93,   93,   96,   91,   95,   95,   96,   92,
        0,   96,   92,   98,   93,   99,  100,   98,   95,   96,
        0,  103,   99,    0,  111,  103,   99,  104,   98,    0,
        0,  104,  111,    0,  100,  103,  103,   99,  100,  114,
      104,  115,  104,  114,  111,  115,  116,    0,  115,  100,
      116,  114,    0,  117,  114,  118,  115,  117,  119,  118,
      120,  116,  119,    0,  120,  121,    0,  118,  117,  121,

      118,    0,  122,  119,  123,  120,  122,  123,  123,  124,
      121,  125,  126,  124,    0,  125,  126,  122,  125,  123,
      141,  127,  141,    0,  124,  127,  125,  126,  128,  129,
      130,  131,  128,  129,  130,  131,  127,    0,    0,    0,
        0,    0,  130,  128,  129,  130,  131,  132,  133,  134,
      135,  132,  133,  134,  135,  139,  132,  136,  133,  139,
      137,  136,  132,  133,  134,  135,  136,  137,    0,  138,
      139,  137,  136,  138,  140,    0,  138,  146,  140,    0,
        0,  146,  137,  147,  138,    0,    0,  147,    0,  140,
      140,  148,  146,  147,    0,  148,  149,    0,  147,  151,

      149,  150,    0,  151,  148,  150,  148,    0,  150,  152,
        0,  149,    0,  152,  151,  153,  150,  154,    0,  153,
        0,  154,  153,  155,  152,    0,    0,  155,    0,  153,
      153,  155,  154,  156,    0,  157,  158,  156,  155,  157,
      158,    0,  157,  160,    0,  158,    0,  160,  156,  159,
      157,  158,  161,  159,    0,  162,  161,  159,  160,  162,
        0,  163,  164,    0,  159,  163,  164,  161,  165,  166,
      162,  172,  165,  166,  167,  172,  163,  164,  173,  166,
      167,    0,  173,  165,  166,  168,  172,  168,  174,  168,
      175,  176,  174,  173,  175,  176,    0,  177,  175,    0,

      168,  177,    0,  174,  167,  175,  176,  178,  167,  179,
      181,  178,  177,  179,  181,    0,    0,  180,    0,  167,
      179,  180,  178,    0,  179,  181,  182,  180,    0,  183,
      182,  184,  180,  183,  187,  184,  188,    0,  187,  189,
      188,  182,    0,  189,  183,    0,  184,  189,  190,  187,
        0,  188,  190,  191,  189,  192,  193,  191,  194,  192,
      193,  190,  194,  190,    0,    0,    0,  191,  191,  193,
      192,  193,  195,  194,  196,    0,  195,  197,  196,  198,
        0,  197,    0,  198,  199,    0,  198,  195,  199,  196,
      196,  200,  197,  201,  198,  200,  202,  201,  199,  199,

      202,    0,    0,  204,    0,    0,  200,  204,  201,  203,
      202,  202,    0,  203,  203,  205,  204,  206,  204,  205,
        0,  206,  208,  207,  203,  209,  208,  207,    0,  209,
      205,    0,  206,    0,    0,  205,  207,  208,  207,  210,
      209,  211,  213,  210,  212,  211,  213,  214,  212,    0,
        0,    0,    0,  214,  210,  213,  211,  213,  212,  212,
      215,  216,    0,  217,  215,  216,    0,    0,    0,  217,
        0,    0,    0,    0,    0,  215,  216,  214,    0,    0,
        0,  214,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  214,  217,    0,    0,    0,  217,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  217,  223,
      223,  223,  223,  224,  224,  224,  224,  225,  225,  225,
      225,  226,  226,  226,  226,  227,  227,  228,    0,  228,
      228,  229,  229,  229,  230,  230,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int zz_flex_debug;
int zz_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *zztext;
#line 1 "scanner.ll"
/* -*-C++-*- */
#line 3 "scanner.ll"
#include <iostream>
#include <cstring>
#include <compiler/ParseTree.h>
#include "parser.h"
    
    std::vector<FILE*> file_stack;
    int command_buffer_count = 0;
    int buffer_count = 0;
    void return_to_main_buffer();
    void close_buffer();


#line 755 "scanner.cc"

#define INITIAL 0
#define RDATA 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int zzwrap (void );
#else
extern int zzwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( zztext, zzleng, 1, zzout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( zzin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( zzin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, zzin))==0 && ferror(zzin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(zzin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int zzlex (void);

#define YY_DECL int zzlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after zztext and zzleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 23 "scanner.ll"


#line 913 "scanner.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! zzin )
			zzin = stdin;

		if ( ! zzout )
			zzout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			zzensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				zz_create_buffer(zzin,YY_BUF_SIZE );
		}

		zz_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of zztext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 223 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 837 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 25 "scanner.ll"
zzlval.intval=MODEL; return MODEL;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 26 "scanner.ll"
zzlval.intval=DATA; return DATA;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 27 "scanner.ll"
zzlval.intval=IN; return IN;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 28 "scanner.ll"
zzlval.intval=TO; return TO;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 29 "scanner.ll"
zzlval.intval=INITS; return INITS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 30 "scanner.ll"
zzlval.intval=PARAMETERS; return PARAMETERS;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 32 "scanner.ll"
zzlval.intval=COMPILE; return COMPILE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 33 "scanner.ll"
zzlval.intval=NCHAINS; return NCHAINS;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 34 "scanner.ll"
zzlval.intval=INITIALIZE; return INITIALIZE;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 35 "scanner.ll"
zzlval.intval=CHAIN; return CHAIN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "scanner.ll"
zzlval.intval=UPDATE; return UPDATE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "scanner.ll"
zzlval.intval=ADAPT; return ADAPT;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "scanner.ll"
zzlval.intval=BY; return BY;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 41 "scanner.ll"
zzlval.intval=MONITOR; return MONITOR;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 42 "scanner.ll"
zzlval.intval=MONITORS; return MONITORS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 43 "scanner.ll"
zzlval.intval=TYPE; return TYPE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 44 "scanner.ll"
zzlval.intval=SET; return SET;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 45 "scanner.ll"
zzlval.intval=CLEAR; return CLEAR;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 46 "scanner.ll"
zzlval.intval=THIN; return THIN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 47 "scanner.ll"
zzlval.intval=SAMPLERS; return SAMPLERS;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 49 "scanner.ll"
zzlval.intval=CODA; return CODA;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 50 "scanner.ll"
zzlval.intval=STEM; return STEM;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 52 "scanner.ll"
zzlval.intval=LOAD; return LOAD;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 53 "scanner.ll"
zzlval.intval=EXIT; return EXIT;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 55 "scanner.ll"
zzlval.intval=DIRECTORY; return DIRECTORY;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 56 "scanner.ll"
zzlval.intval=CD; return CD;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 57 "scanner.ll"
zzlval.intval=PWD; return PWD;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 58 "scanner.ll"
zzlval.intval=RUN; return RUN;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 60 "scanner.ll"
return ',';
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 61 "scanner.ll"
return '[';
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 62 "scanner.ll"
return ']';
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 63 "scanner.ll"
return '(';
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 64 "scanner.ll"
return ')';
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 65 "scanner.ll"
return '=';
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 66 "scanner.ll"
return ARROW;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 67 "scanner.ll"
return '*';
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 68 "scanner.ll"
return ':';
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 69 "scanner.ll"
return ';';
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 70 "scanner.ll"
return '`';
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 72 "scanner.ll"
BEGIN(COMMENT);
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 73 "scanner.ll"
/* Eat up anything that's not a '*'   */
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 74 "scanner.ll"
/* Eat up '*'s not followed by a '/'  */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 75 "scanner.ll"
BEGIN(INITIAL);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 77 "scanner.ll"
/* Eat whitespace */
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 78 "scanner.ll"
/* Eat comments */
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 79 "scanner.ll"
/* Eat newlines */
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 80 "scanner.ll"
return ENDCMD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 82 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 85 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 88 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 91 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 94 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 97 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 100 "scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 103 "scanner.ll"
{
  zzlval.intval = atoi(zztext); return INT;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "scanner.ll"
return DIM;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 108 "scanner.ll"
return NA;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 109 "scanner.ll"
return R_NULL;
	YY_BREAK
case 59:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 110 "scanner.ll"
return STRUCTURE;
	YY_BREAK
case 60:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 111 "scanner.ll"
return LIST;
	YY_BREAK
case 61:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 112 "scanner.ll"
return 'c';
	YY_BREAK
case 62:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 113 "scanner.ll"
return ASINTEGER;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "scanner.ll"
{ 
  zzlval.stringptr = new std::string(zztext);
  return NAME;
}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 120 "scanner.ll"
{
  zzlval.stringptr = new std::string(zztext);
  // Remove enclosing quotes
  zzlval.stringptr->erase(zzlval.stringptr->size() - 1, 1);
  zzlval.stringptr->erase(0, 1);
  return STRING;
}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 128 "scanner.ll"
{
    zzlval.stringptr = new std::string(zztext);
    zzlval.stringptr->erase(zzlval.stringptr->size() - 1, 1);
    zzlval.stringptr->erase(0,1);
    return STRING;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 135 "scanner.ll"
{
    if (command_buffer_count) {
	close_buffer();
	--command_buffer_count;
    }
    else {
	yyterminate();
    }
    return ENDSCRIPT;
}
	YY_BREAK
case YY_STATE_EOF(RDATA):
#line 145 "scanner.ll"
{
    close_buffer();
    BEGIN(INITIAL);
    return ENDDATA;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 150 "scanner.ll"
ECHO;
	YY_BREAK
#line 1396 "scanner.cc"
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed zzin at a new source and called
			 * zzlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = zzin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( zzwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * zztext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of zzlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					zzrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			zzrestart(zzin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 223 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 223 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 222);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up zztext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					zzrestart(zzin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( zzwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve zztext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void zzrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        zzensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            zz_create_buffer(zzin,YY_BUF_SIZE );
	}

	zz_init_buffer(YY_CURRENT_BUFFER,input_file );
	zz_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void zz_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		zzpop_buffer_state();
	 *		zzpush_buffer_state(new_buffer);
     */
	zzensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	zz_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (zzwrap()) processing, but the only time this flag
	 * is looked at is after zzwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void zz_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	zzin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE zz_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) zzalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in zz_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) zzalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in zz_create_buffer()" );

	b->yy_is_our_buffer = 1;

	zz_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with zz_create_buffer()
 * 
 */
    void zz_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		zzfree((void *) b->yy_ch_buf  );

	zzfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a zzrestart() or at EOF.
 */
    static void zz_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	zz_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then zz_init_buffer was _probably_
     * called from zzrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void zz_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		zz_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void zzpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	zzensure_buffer_stack();

	/* This block is copied from zz_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from zz_switch_to_buffer. */
	zz_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void zzpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	zz_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		zz_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void zzensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)zzalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)zzrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE zz_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) zzalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in zz_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	zz_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to zzlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       zz_scan_bytes() instead.
 */
YY_BUFFER_STATE zz_scan_string (yyconst char * yystr )
{
    
	return zz_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to zzlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE zz_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) zzalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in zz_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = zz_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in zz_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up zztext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		zztext[zzleng] = (yy_hold_char); \
		(yy_c_buf_p) = zztext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		zzleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int zzget_lineno  (void)
{
        
    return zzlineno;
}

/** Get the input stream.
 * 
 */
FILE *zzget_in  (void)
{
        return zzin;
}

/** Get the output stream.
 * 
 */
FILE *zzget_out  (void)
{
        return zzout;
}

/** Get the length of the current token.
 * 
 */
int zzget_leng  (void)
{
        return zzleng;
}

/** Get the current token.
 * 
 */

char *zzget_text  (void)
{
        return zztext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void zzset_lineno (int  line_number )
{
    
    zzlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see zz_switch_to_buffer
 */
void zzset_in (FILE *  in_str )
{
        zzin = in_str ;
}

void zzset_out (FILE *  out_str )
{
        zzout = out_str ;
}

int zzget_debug  (void)
{
        return zz_flex_debug;
}

void zzset_debug (int  bdebug )
{
        zz_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from zzlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    zzin = stdin;
    zzout = stdout;
#else
    zzin = (FILE *) 0;
    zzout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * zzlex_init()
     */
    return 0;
}

/* zzlex_destroy is for both reentrant and non-reentrant scanners. */
int zzlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		zz_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		zzpop_buffer_state();
	}

	/* Destroy the stack itself. */
	zzfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * zzlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *zzalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *zzrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void zzfree (void * ptr )
{
	free( (char *) ptr );	/* see zzrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 150 "scanner.ll"



int zzwrap()
{
  return 1;
}

void push_file(FILE *file) {
    file_stack.push_back(file);
}

void pop_file() {
    if (file_stack.empty())
        return;

    fclose(file_stack.back());
    file_stack.pop_back();
}


bool open_data_buffer(std::string const *name) {
    FILE *file = fopen(name->c_str(),"r");
    if (file) {
	zzpush_buffer_state(zz_create_buffer(file,YY_BUF_SIZE));
	push_file(file);
        ++buffer_count;
	BEGIN(RDATA);
	return true;
    }
    else {
	return false;
    }
}

void close_buffer() {
    zzpop_buffer_state();
    pop_file();
    --buffer_count;
}
    
bool open_command_buffer(std::string const *name) {
    FILE *file = fopen(name->c_str(),"r");
    if (file) {
	file_stack.push_back(file);
	zzpush_buffer_state(zz_create_buffer(file,YY_BUF_SIZE ));
	++command_buffer_count;
        ++buffer_count;
	return true;
    }
    else {
	return false;
    }
}

void return_to_main_buffer() {
    /* Clear all buffers in the stack and return to the first */
    while(buffer_count) {
	zzpop_buffer_state();
	--buffer_count;
    }
    command_buffer_count = 0;
    BEGIN(INITIAL);
}


