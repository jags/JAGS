#ifndef CONSOLE_H_
#define CONSOLE_H_

#include <sarray/SArray.h>

#include <vector>
#include <iostream>
#include <string>
#include <map>

class BUGSModel;
class ParseTree;
class RNG;

/**
 * Flags for the function Console##dumpState
 */
enum DumpType {DUMP_DATA, DUMP_PARAMETERS, DUMP_ALL};

/**
 *
 */
class Console
{
  std::ostream &_out;
  std::ostream &_err;
  BUGSModel *_model;
  ParseTree *_pdata;
  ParseTree *_prelations;
  std::vector<ParseTree*> *_pvariables;
  void clearModel();
public:
  /**
   * Constructor
   *
   * @param out Output stream to which information messages will be printed.
   *
   * @param err Output stream to which error messages will be printed.
   *
   */
  Console(std::ostream &out, std::ostream &err);
  ~Console();
  /**
   * Checks syntactic correctness of model
   *
   * @param file containing BUGS-language description of the model
   *
   * @return true on success or false on error.
   */
  bool checkModel(FILE *file);
  /**
   * Compiles the model.
   *
   * @param data Map relating the names of the observed variables to
   * their values.
   *
   * @param nchain Number of chains in the model.
   *
   * @param gendata Boolean flag indicating whether the data generation
   * sub-model should be run, if there is one.
   *
   * @return true on success or false on error.
   */
  bool compile(std::map<std::string, SArray> &data_table, unsigned int nchain,
               bool gendata);
  /**
   * @short Sets the parameters (unobserved variables) of the model.  
   * 
   * This is normally done to supply initial values to the model but
   * may also be done at any point in the chain.
   *
   * @param param_table Map relating the names of the parameters to
   * their values
   *
   * @param chain Number of chain (starting from 1) to apply parameter
   * values to
   *
   * @return true on success, false on failure.
   */
  bool setParameters(std::map<std::string, SArray> const &param_table,
		     unsigned int chain);
  /**
   * Sets the name of the RNG for the given chain. The Console searches
   * through all loaded RNGFactories to find one that will generate an
   * RNG object with the given name.
   *
   * @return true on success, false on failure.
   */
  bool setRNGname(std::string const &name, unsigned int chain);
  /**
   * @short Initializes the model. 
   * 
   * Any uninitialized parameters are given values by deterministic forward
   * sampling. Then default RNGs are chosen for all chains that have not
   * already had their RNG set, based on the list of RNGFactory objects.
   * Finally, the samplers are chosen based for the unobserved
   * stochastic nodes based on the list of sampler factories.
   *
   * @returns true on success, false on failure.
   *
   * @see Model##samplerFactories, Model##rngFactories
   */
  bool initialize();
  /**
   * @short Updates the Markov chain generated by the model.
   *
   * @param n Number of iterations of the Markov chain.
   *
   * @returns true on success, false on failure.
   */ 
  bool update (unsigned long n);
  /**
   * Sets a trace monitor for a subset of the given variable
   *
   * @param name Name of array containing nodes to be monitored
   * 
   * @param range Range describing subset of named array to monitor.
   * A NULL range may be given, in which case, the whole array is
   * monitored.
   *
   */
  bool setMonitor(std::string const &name, Range const &range,
		  unsigned int thin); 
  /**
   * @short Clears a trace monitor. 
   * 
   * The arguments name and range must correspond exactly to a
   * previous call to setMonitor.
   */
  bool clearMonitor(std::string const &name, Range const &range);
  /**
   * @short Dumps the state of the model.
   *
   * Writes the current values of the variables to the data table.
   *
   * @param data_table Data table to receive values. This must be
   * initially empty.
   *
   * @param chain Number of the chain for which to dump values (starting
   * from 1). Note that only 1 chain is currently supported.
   *
   * @param type Flag describing which values in the model to dump. 
   * DUMP_DATA dumps the observed stochastic nodes, DUMP_PARAMETERS
   * dumps the unobserved stochastic nodes, and DUMP_ALL, dumps the values
   * of all named nodes in the model.
   */
  bool dumpState(std::map<std::string,SArray> &data_table, 
                 std::string &rng_name,
		 DumpType type, unsigned int chain);
  /**
   * Returns the iteration number of the model.
   */
  unsigned long iter(unsigned int chain) const;
  /**
   * Dump the contants of monitored node in CODA format
   * The parameters name and range must correspond to a previous
   * call to setMonitor.
   *
   * @param name Name of array containing monitored nodes.
   * 
   * @param range Range describing subset of named array to monitor.
   * A NULL range may be given, in which case the whole array is
   * selected.
   *
   * @param index Index file stream
   *
   * @param output Output file stream
   *
   */
  bool coda(std::string const &name, Range const &range,
	    std::ofstream &index, std::vector<std::ofstream*> &output);
  /**
   * Dumps the contents of all monitored nodes in CODA format
   *
   * @param index Index file stream
   *
   * @param output Output file stream
   */
  bool  coda(std::ofstream &index, std::vector<std::ofstream*> &output);
  BUGSModel const *model();
  unsigned int nchain() const;
  bool getMonitoredValues(std::map<std::string,SArray> &data_table,
			  unsigned int chain);
};

#endif /* CONSOLE_H_ */
